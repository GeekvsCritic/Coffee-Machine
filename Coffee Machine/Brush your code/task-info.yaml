type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    # Write your code here
    # Stage 1
    """
    print("Starting to make a coffee")
    print("Grinding coffee beans")
    print("Boiling water")
    print("Mixing boiled water with crushed coffee beans")
    print("Pouring coffee into the cup")
    print("Pouring some milk into the cup")
    print("Coffee is ready!")
    """
    # Stage 2
    """print("Write how many cups of coffee you will need: > 25")

    number_of_cups_needed = int(input())
    water_needed = number_of_cups_needed * 200  # water needed in ml
    milk_needed = number_of_cups_needed * 50  # milk needed in ml
    coffee_beans_needed = number_of_cups_needed * 15  # beans required in grams
    print("For ", + number_of_cups_needed, "cups of coffee you will need:")
    print(water_needed, "ml of water")
    print(milk_needed, "ml of milk")
    print(coffee_beans_needed, "g of coffee beans")
    """
    # Stage 3
    """
    print("Write how many ml of water the coffee machine has: 500")
    print("Write how many ml of milk the coffee machine has: 250")
    print("Write how many grams of coffee beans the coffee machine has:> 200")
    print("Write how many cups of coffee you will need: > 10")

    water = int(input())  # water in ml
    milk = int(input())  # milk in ml
    beans = int(input())  # beans in gm
    cups = int(input())  # cups in count
    by_water = water // 200
    by_milk = milk // 50
    by_beans = beans // 15
    can_make = min(by_water, by_milk, by_beans)

    if cups > can_make:
        print("No, I can make only ", +can_make, "cups of coffee")
    elif cups < can_make:
        diff_cups = can_make - cups
        print("Yes, I can make that amount of coffee (and even", +diff_cups, "more than that)")
    else:
        print("Yes, I can make that amount of coffee")

    """

    # Stage 4
    """
    water = 400  # ml
    milk = 540  # ml
    money = 550  # $
    beans = 120  # gms
    cups = 9  # count
    print("The coffee machine has:")
    print(water, " of water")
    print(milk, "of milk")
    print(beans, "of coffee beans")
    print(cups, "of disposable cups")
    print(money, "of money")

    print("Write action (buy, fill, take):")
    user_input = str(input())


    def conditon(user_value):
        global water
        global milk
        global money
        global beans
        global cups
        if user_value == 'fill':
            print("Write how many ml of water do you want to add:")
            water += int(input())
            print("Write how many ml of milk do you want to add:")
            milk += int(input())
            print("Write how many grams of coffee beans do you want to add:")
            beans += int(input())
            print("Write how many disposable cups of coffee do you want to add:")
            cups += int(input())
        elif user_value == 'take':
            print("I gave you $", + money)
            money -= money
        elif user_value == 'buy':
            print("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:")
            user_option = int(input())
            cups -= 1
            if user_option == 1:
                water = water - 250
                beans = beans - 16
                money += 4
            elif user_option == 2:
                water = water - 350
                milk = milk - 75
                beans = beans - 20
                money += 7
            elif user_option == 3:
                water = water - 200
                milk = milk - 100
                beans = beans - 12
                money += 6
        return


    conditon(user_input)
    print("The coffee machine has:")
    print(water, " of water")
    print(milk, "of milk")
    print(beans, "of coffee beans")
    print(cups, "of disposable cups")
    print(money, "of money")
    """
    # Stage 5
    water = 400  # ml
    milk = 540  # ml
    money = 550  # $
    beans = 120  # gms
    cups = 9  # count
    actions = ["buy", "fill", "take", "remaining", "exit"]


    def what_machine_has():
        print("The coffee machine has:")
        print(water, " of water")
        print(milk, "of milk")
        print(beans, "of coffee beans")
        print(cups, "of disposable cups")
        print(money, "of money")


    def perform_action(action):
        while True:
            global water
            global milk
            global money
            global beans
            global cups
            local_water = global water
            local_ocal_milk = global milk
            local_beans = global beans
            local_cups = global cups
            if action == 'remaining':
                what_machine_has()
            elif action == 'take':
                print("I gave you $", + money)
                money -= money
            elif action == 'fill':
                print("Write how many ml of water do you want to add:")
                water += int(input())
                print("Write how many ml of milk do you want to add:")
                milk += int(input())
                print("Write how many grams of coffee beans do you want to add:")
                beans += int(input())
                print("Write how many disposable cups of coffee do you want to add:")
                cups += int(input())
            elif action == 'buy':
                print("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:")
                buy_option = input()
                if buy_option == 'back':
                    break
                elif buy_option == '1':

                else:
                    continue


    while True:
        print("Write action (buy, fill, take, remaining, exit):")
        user_input = input()
        if user_input == 'exit':
            break
        elif user_input != 'exit':
            perform_action(user_input)
        else:
            continue
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: -1
